Index: src/main/java/ca/usherbrooke/fgen/api/business/Tache.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ca.usherbrooke.fgen.api.business;\r\n\r\npublic class Tache\r\n{\r\n    public Integer id_tache;\r\n    public Integer id_tache_parent;\r\n    public Integer id_projet;\r\n    public String description;\r\n    public String date_modifier;\r\n    public String titre;\r\n    public String cip_createur;\r\n    private String commencerA;\r\n    public String cipUsager;\r\n    private String finiA;\r\n\r\n    public String getCommencerA()\r\n    {\r\n        return commencerA;\r\n    }\r\n\r\n    public void setCommencerA(String commencerA)\r\n    {\r\n        this.commencerA = commencerA;\r\n    }\r\n\r\n    public String getFiniA()\r\n    {\r\n        return finiA;\r\n    }\r\n\r\n    public void setFiniA(String finiA)\r\n    {\r\n        this.finiA = finiA;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ca/usherbrooke/fgen/api/business/Tache.java b/src/main/java/ca/usherbrooke/fgen/api/business/Tache.java
--- a/src/main/java/ca/usherbrooke/fgen/api/business/Tache.java	(revision 8adf2dc764d4c83634d9d36e6bea4167d90d1b77)
+++ b/src/main/java/ca/usherbrooke/fgen/api/business/Tache.java	(date 1721234676495)
@@ -13,23 +13,4 @@
     public String cipUsager;
     private String finiA;
 
-    public String getCommencerA()
-    {
-        return commencerA;
-    }
-
-    public void setCommencerA(String commencerA)
-    {
-        this.commencerA = commencerA;
-    }
-
-    public String getFiniA()
-    {
-        return finiA;
-    }
-
-    public void setFiniA(String finiA)
-    {
-        this.finiA = finiA;
-    }
 }
\ No newline at end of file
Index: src/main/resources/ca/usherbrooke/fgen/api/mapper/TacheMapper.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE mapper\r\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\r\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\r\n<mapper namespace=\"ca.usherbrooke.fgen.api.mapper.TacheMapper\">\r\n\r\n    <!-- Requête pour sélectionner les tâches avec des filtres sur l'usager et le projet -->\r\n    <select id=\"selectTache\" resultType=\"ca.usherbrooke.fgen.api.business.Tache\">\r\n        SELECT app.tache.id_tache,\r\n               titre,\r\n               description,\r\n               id_projet,\r\n               cip_createur,\r\n               id_tache_parent\r\n        FROM app.tache\r\n                 LEFT JOIN app.usager_tache ON app.tache.id_tache = app.usager_tache.id_tache\r\n        WHERE (app.usager_tache.cip_usager, id_projet) = (COALESCE(#{cipUsager}, cip_usager), COALESCE(#{idProjet}, id_projet))\r\n    </select>\r\n\r\n    <!-- Ajouter une tâche -->\r\n    <insert id=\"addTache\">\r\n        INSERT INTO app.tache (titre, description, id_projet, cip_createur, id_tache_parent, date_creation)\r\n        VALUES (#{titre}, #{description}, #{idProjet}, #{cipCreateur}, #{idTacheParent}, now())\r\n    </insert>\r\n\r\n    <!-- Ajouter une tâche pas de parent loll-->\r\n    <insert id=\"addTachePasDeParent\">\r\n        INSERT INTO app.tache (titre, description, id_projet, cip_createur, date_creation)\r\n        VALUES (#{titre}, #{description}, #{idProjet}, #{cipCreateur}, now())\r\n    </insert>\r\n\r\n    <!-- Supprimer une tâche -->\r\n    <delete id=\"removeTache\">\r\n        DELETE FROM app.tache WHERE tache.id_tache = #{idTache}\r\n    </delete>\r\n\r\n\r\n    <!-- Modifier une tâche -->\r\n    <update id=\"modifyTache\">\r\n            UPDATE app.tache\r\n            SET titre = #{titre},\r\n                description = #{description},\r\n                date_modifier = NOW()\r\n            WHERE id_tache = #{idTache}\r\n    </update>\r\n\r\n\r\n    <!-- Afficher une tâche -->\r\n    <select id=\"printTache\" resultType=\"ca.usherbrooke.fgen.api.business.Tache\">\r\n        SELECT id_tache, titre, description, id_projet, cip_createur, id_tache_parent\r\n        FROM app.tache\r\n        WHERE id_tache = #{idTache}\r\n    </select>\r\n\r\n    <!-- Afficher la table des tâches -->\r\n    <select id=\"printTableTache\" resultType=\"ca.usherbrooke.fgen.api.business.Tache\">\r\n        SELECT id_tache, titre, description, id_projet, cip_createur, id_tache_parent\r\n        FROM app.tache\r\n    </select>\r\n\r\n</mapper>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/ca/usherbrooke/fgen/api/mapper/TacheMapper.xml b/src/main/resources/ca/usherbrooke/fgen/api/mapper/TacheMapper.xml
--- a/src/main/resources/ca/usherbrooke/fgen/api/mapper/TacheMapper.xml	(revision 8adf2dc764d4c83634d9d36e6bea4167d90d1b77)
+++ b/src/main/resources/ca/usherbrooke/fgen/api/mapper/TacheMapper.xml	(date 1721234885297)
@@ -54,8 +54,13 @@
 
     <!-- Afficher la table des tâches -->
     <select id="printTableTache" resultType="ca.usherbrooke.fgen.api.business.Tache">
-        SELECT id_tache, titre, description, id_projet, cip_createur, id_tache_parent
-        FROM app.tache
+        SELECT t.id_tache,
+               t.titre,
+               t.description,
+               t.id_projet,
+               t.cip_createur,
+               t.id_tache_parent
+        FROM app.tache t
     </select>
 
 </mapper>
\ No newline at end of file
Index: docker/webserver/singleTask.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head> \r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n\r\n\r\n    <title>Votre Titre</title>\r\n\r\n    <script src=\"scripts/script.js\"></script>\r\n    <script src=\"scripts/tasks.js\"></script>\r\n    <script src=\"http://localhost:8180/js/keycloak.js\"></script>\r\n    <script src=\"scripts/usager.js\"></script>\r\n    <link rel=\"stylesheet\" href=\"styles/style.css\">\r\n\r\n    <script src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\"></script>\r\n    <script src=\"scripts/authentificationKeycloak.js\"></script>\r\n    <script>\r\n\r\n        const urlParams = new URLSearchParams(window.location.search);\r\n        const taskId = urlParams.get('taskId');\r\n        const taskTitle = urlParams.get('taskTitle');\r\n\r\n\r\n    </script>\r\n\r\n    \r\n\r\n    \r\n</head>\r\n\r\n<body>\r\n    <!--<body>-->\r\n    <div id=\"headerContent\"></div>\r\n\r\n    <main>\r\n        <h1 id=\"title\">Tâche 1</h1>\r\n        <h2>\r\n            <button class=\"chrono\" id=\"chrono\">\r\n                <h1>\r\n                    <span>Start chrono</span>\r\n                </h1>\r\n            </button>\r\n            <button class=\"clear\" id=\"clear\" onclick=clearChrono()>\r\n                <h1>\r\n                    <span id=\"clearChrono\">Clear chrono</span>\r\n                </h1>\r\n            </button>\r\n            <span id=\"chronoDisplay\"></span>\r\n        </h2>\r\n\r\n        \r\n        <h3 id=\"informationTâche\">\r\n            <div id=\"spanContainer\">\r\n                <span id=\"propriétaire\"></span>\r\n                <span id=\"totalTime\">Temps total : </span>\r\n                <span>Contributeurs : </span>\r\n                <span id=\"contributeur\"></span>\r\n                <style>\r\n                    #contributeur {\r\n                        margin-left: 20px;\r\n                    }\r\n                </style>\r\n            </div>\r\n        </h3>\r\n\r\n        <style>\r\n            h2 {\r\n                margin-inline-start: 10px;\r\n            }\r\n\r\n            #informationTâche {\r\n                margin-inline-start: 10px;\r\n            }\r\n\r\n\r\n        </style>\r\n        \r\n        <style>\r\n            #spanContainer {\r\n                display: flex;\r\n                flex-direction: column;\r\n            }\r\n        </style>\r\n\r\n\r\n        <style>\r\n            /* Insérez ici le code CSS */\r\n            #tableauDonnees {\r\n                margin:10px ;\r\n                width: 800px fixed;\r\n                table-layout: fixed;\r\n                border-collapse: collapse;\r\n                max-height: 400px; /* Définissez la hauteur maximale selon vos besoins */\r\n                overflow: auto; /* Affiche une barre de défilement si nécessaire */\r\n                display: block; /* Assurez-vous que le tableau se comporte comme un bloc pour appliquer correctement overflow */\r\n            }\r\n            #tableauDonnees th, #tableauDonnees td {\r\n                border: 1px solid #ddd;\r\n                text-align: left;\r\n                padding: 8px;\r\n            }\r\n            /* Définir des largeurs spécifiques pour chaque colonne */\r\n            #tableauDonnees th:nth-child(1), #tableauDonnees td:nth-child(1) { width: 20%; }\r\n            #tableauDonnees th:nth-child(2), #tableauDonnees td:nth-child(2) { width: 35%; }\r\n            #tableauDonnees th:nth-child(3), #tableauDonnees td:nth-child(3) { width: 35%; }\r\n            #tableauDonnees th:nth-child(4), #tableauDonnees td:nth-child(4) { width: 400px; }\r\n        </style>\r\n\r\n\r\n        <h5 id=\"filtreIndicator\">Filtre : \r\n            <button id=\"filtreTableauCIP\">Seulement vos sessions</button>\r\n            <button id=\"filtreTableauPourcentage\">En pourcentage</button>\r\n        <h5>\r\n        <style>\r\n\r\n            #filtreIndicator {\r\n                margin-inline-start: 10px;\r\n            }\r\n            h3 {\r\n                margin-inline-start: 10px;\r\n            }\r\n        </style>\r\n        \r\n        <style>\r\n            #filtreTableauCIP {\r\n                margin-inline-start: 10px;\r\n                padding: 5px 5px;\r\n                border: 1px solid #0000007f;\r\n                background-color: #f2f5f8;\r\n                color: rgb(14, 13, 13);\r\n                cursor: pointer;\r\n                outline: none;\r\n            }\r\n\r\n            #filtreTableauCIP.active {\r\n                margin-inline-start: 10px;\r\n                background-color: rgba(132, 137, 207, 0.767);\r\n                border-color: #000102;\r\n                color: white;\r\n            }\r\n\r\n            #filtreTableauPourcentage {\r\n                margin-inline-start: 10px;\r\n                padding: 5px 5px;\r\n                border: 1px solid #0000007f;\r\n                background-color: #f2f5f8;\r\n                color: rgb(14, 13, 13);\r\n                cursor: pointer;\r\n                outline: none;\r\n            }\r\n\r\n            #filtreTableauPourcentage.active {\r\n                margin-inline-start: 10px;\r\n                background-color: rgba(132, 137, 207, 0.767);\r\n                border-color: #000102;\r\n                color: white;\r\n            }\r\n        </style>\r\n\r\n        <table id=\"tableauDonnees\">\r\n            <thead>\r\n              <tr>\r\n                <th>CIP Usager</th>\r\n                <th>Commencé À</th>\r\n                <th>Fin À</th>\r\n                <th>Temps Total</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n            </tbody>\r\n        </table>\r\n\r\n        \r\n\r\n        <script>\r\n            \r\n            document.addEventListener('keycloakAuthenticated', function() {\r\n\r\n                console.log(taskId); // Utilisez l'ID de la tâche comme nécessaire\r\n                console.log(taskTitle); // Utilisez le titre de la tâche comme nécessaire\r\n                \r\n\r\n                // Sélectionnez l'élément <h1> et mettez à jour son contenu\r\n                const Title = document.querySelector('h1');\r\n                Title.textContent = `Tâche ${taskId} : ${taskTitle}`;\r\n                const infoTache = document.getElementById('propriétaire');\r\n                infoTache.textContent = `Propriétaire : ${usager.cip}`;\r\n\r\n\r\n                // Assurez-vous que l'élément pour afficher la réponse existe, par exemple un div#response\r\n                requestUpdateTableau();\r\n                \r\n\r\n               \r\n            });\r\n\r\n            \r\n            function startChrono() {\r\n\r\n                var url = \"http://localhost:8888/api/chrono/\"+usager.cip+\"/\"+taskId;\r\n                if (window.keycloakToken) {\r\n                    axios.get(url, {\r\n                        headers: {\r\n                            'Authorization': 'Bearer ' + window.keycloakToken,\r\n                        }\r\n                    })\r\n                    .then(function () {\r\n                        requestUpdateTableau();\r\n                    \r\n                    })\r\n                    .catch(function (error) {\r\n                        console.log('Error on request:', error);\r\n                        // Gestion supplémentaire de l'erreur\r\n                    });\r\n                } else {\r\n                    console.log('Token is undefined');\r\n                    // Gérer le cas où le token est undefined\r\n                }\r\n\r\n            }\r\n\r\n\r\n\r\n            let isLooping = false;\r\n            let loopInterval;\r\n            let elapsedTime = 0; // Temps écoulé en secondes\r\n\r\n            \r\n            function clearChrono()\r\n            {\r\n                elapsedTime = 0;\r\n                updateChronoDisplay();\r\n            }\r\n        \r\n            function updateChronoDisplay() {\r\n                const chronoDisplay = document.getElementById('chronoDisplay');\r\n                const hours = Math.floor(elapsedTime / 3600);\r\n                const minutes = Math.floor((elapsedTime % 3600) / 60);\r\n                const seconds = elapsedTime % 60;\r\n        \r\n                const formattedTime = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\r\n                chronoDisplay.textContent = formattedTime;\r\n            }\r\n        \r\n            document.getElementById('chrono').addEventListener('click', function() {\r\n                const chonoTitle = document.querySelector('span');\r\n\r\n                if (!isLooping) {\r\n                    // Démarrer la boucle\r\n                    isLooping = true;\r\n                    startChrono();\r\n                    chonoTitle.textContent = 'Stop chrono';\r\n                    loopInterval = setInterval(() => {\r\n                        console.log(\"Boucle en cours...\");\r\n                        elapsedTime += 1; // Incrémenter le temps écoulé\r\n                        updateChronoDisplay(); // Mettre à jour l'affichage du chronomètre\r\n                    }, 1000); // Exécute le code toutes les 1000 millisecondes (1 seconde)\r\n                } else {\r\n                    // Arrêter la boucle\r\n                    clearInterval(loopInterval);\r\n                    isLooping = false;\r\n                    startChrono();\r\n                    chonoTitle.textContent = 'Start chrono';\r\n                    updateChronoDisplay(); // Réinitialiser l'affichage du chronomètre\r\n                }\r\n            });\r\n\r\n            function requestUpdateTableau()\r\n            {;\r\n                if(!isFiltered_CIP)\r\n                {\r\n                    var url = \"http://localhost:8888/api/getsessionsofcip/\"+usager.cip+\"/\"+taskId;\r\n                }\r\n                else\r\n                {\r\n                    var url = \"http://localhost:8888/api/getsessions/\"+taskId;\r\n                }\r\n                \r\n                if (window.keycloakToken) {\r\n                    axios.get(url, {\r\n                        headers: {\r\n                            'Authorization': 'Bearer ' + window.keycloakToken,\r\n                        }\r\n                    })\r\n                    .then(function (response) {\r\n                        console.log(\"Response: \", response.status);\r\n                        updateTableau(response);\r\n                        updateStatisticFromTable(response);\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.log('Error on request:', error);\r\n                        // Gestion supplémentaire de l'erreur\r\n                    });\r\n                } else {\r\n                    console.log('Token is undefined');\r\n                    // Gérer le cas où le token est undefined\r\n                }\r\n            }\r\n\r\n            var filtrePourcentage = false;\r\n            function updateTableau(response) {\r\n                const tableau = document.getElementById('tableauDonnees').getElementsByTagName('tbody')[0];\r\n                tableau.innerHTML = ''; // Efface le contenu du tbody\r\n                var totalTime = 0; // Déplacez totalTime ici pour le calculer correctement\r\n            \r\n                // Première boucle pour calculer totalTime\r\n                response.data.forEach((item) => {\r\n                    const commencerA = new Date(item.commencerA);\r\n                    const finiA = new Date(item.finiA);\r\n                    const differenceMs = finiA - commencerA; // Différence en millisecondes\r\n                    totalTime += differenceMs; // Accumulez totalTime ici\r\n                });\r\n            \r\n                // Deuxième boucle pour insérer les données et calculer les pourcentages si nécessaire\r\n                response.data.forEach((item) => {\r\n                    const ligne = tableau.insertRow();\r\n                    const commencerA = new Date(item.commencerA);\r\n                    const finiA = new Date(item.finiA);\r\n                    const differenceMs = finiA - commencerA;\r\n                    var formattedTime;\r\n            \r\n                    if (!filtrePourcentage) {\r\n                        const totalSeconds = differenceMs / 1000;\r\n                        const hours = Math.floor(totalSeconds / 3600);\r\n                        const minutes = Math.floor((totalSeconds % 3600) / 60);\r\n                        const seconds = Math.floor(totalSeconds % 60);\r\n                        formattedTime = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\r\n                    } else {\r\n                        const percentage = (differenceMs / totalTime) * 100;\r\n                        formattedTime = percentage.toFixed(2) + \"%\"; // Formatte le pourcentage avec deux décimales\r\n                    }\r\n            \r\n                    ligne.insertCell(0).textContent = item.cipUsager;\r\n                    ligne.insertCell(1).textContent = item.commencerA;\r\n                    ligne.insertCell(2).textContent = item.finiA;\r\n                    ligne.insertCell(3).textContent = formattedTime;\r\n                });\r\n            }\r\n\r\n            function updateStatisticFromTable(response) {\r\n                var totalTime = 0;\r\n                const cipContributeurs = {}; // Objet pour suivre les cip et leurs contributeurs\r\n                var differenceMs;\r\n                response.data.forEach((item) => {\r\n                    const commencerA = new Date(item.commencerA);\r\n                    const finiA = new Date(item.finiA);\r\n                    if (!isNaN(commencerA.getTime()) && !isNaN(finiA.getTime())) { // Vérifie si les dates sont valides\r\n                        differenceMs = finiA - commencerA; // Différence en millisecondes\r\n                        totalTime += differenceMs;\r\n                \r\n                        // Vérifie si le cipUsager existe déjà dans l'objet des temps\r\n                        if (!cipContributeurs[item.cipUsager]) {\r\n                            cipContributeurs[item.cipUsager] = { contributeurs: new Set([item.contributeur]), totalTime: 0 }; // Initialise avec un Set et un temps total\r\n                        } else {\r\n                            cipContributeurs[item.cipUsager].contributeurs.add(item.contributeur);\r\n                        }\r\n                        // Ajoute le temps de cette entrée au temps total pour ce cipUsager\r\n                        cipContributeurs[item.cipUsager].totalTime += differenceMs;\r\n                    } else {\r\n                        // Initialise le cipUsager s'il n'existe pas et que les dates ne sont pas valides\r\n                        if (!cipContributeurs[item.cipUsager]) {\r\n                            cipContributeurs[item.cipUsager] = { contributeurs: new Set([item.contributeur]), totalTime: 0 };\r\n                        } else {\r\n                            cipContributeurs[item.cipUsager].contributeurs.add(item.contributeur);\r\n                        }\r\n                    }\r\n                });\r\n                \r\n                if(filtrePourcentage)\r\n                {\r\n                    for (var cip in cipContributeurs) {\r\n                        if (cipContributeurs.hasOwnProperty(cip)) {\r\n                            var cipData = cipContributeurs[cip];\r\n                            cipData.totalTime = (cipData.totalTime / totalTime) * 100 + \"%\";\r\n                        }\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    Object.values(cipContributeurs).forEach((cip) => {\r\n                        var totalSeconds2 = cip.totalTime / 1000;\r\n                        var hours2 = Math.floor(totalSeconds2 / 3600);\r\n                        var minutes2 = Math.floor((totalSeconds2 % 3600) / 60);\r\n                        var seconds2 = Math.floor(totalSeconds2 % 60);\r\n                        cip.totalTime = `${hours2.toString().padStart(2, '0')}:${minutes2.toString().padStart(2, '0')}:${seconds2.toString().padStart(2, '0')}`;\r\n                    });\r\n                }\r\n\r\n                // Convertir le temps total en secondes\r\n            \r\n                const totalSeconds = totalTime / 1000;\r\n                const hours = Math.floor(totalSeconds / 3600);\r\n                const minutes = Math.floor((totalSeconds % 3600) / 60);\r\n                const seconds = Math.floor(totalSeconds % 60);\r\n            \r\n                // Formater le temps en hh:mm:ss\r\n                const formattedTotalTime = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\r\n                const displayTotalTime = document.getElementById('totalTime');\r\n                displayTotalTime.textContent = `Temps total : ${formattedTotalTime}`;\r\n\r\n                // Mettre à jour les contributeurs\r\n                \r\n\r\n                const displayContributeur = document.getElementById('contributeur');\r\n                displayContributeur.textContent = ``;\r\n                for (const cip in cipContributeurs) {\r\n                    if (cipContributeurs.hasOwnProperty(cip)) {\r\n                        const cipData = cipContributeurs[cip];\r\n                        // Utilisez innerHTML pour pouvoir insérer des balises HTML\r\n                        // Ajoutez <br> après chaque contributeur pour les afficher sur des lignes séparées\r\n                        displayContributeur.innerHTML += `${cip} : ${cipData.totalTime} <br>${Array.from(cipData.contributeurs).join('<br>')}`;\r\n                    }\r\n                }\r\n            }\r\n\r\n            let isFiltered_CIP = false;\r\n            document.getElementById(\"filtreTableauCIP\").addEventListener(\"click\", function() {\r\n                if (isFiltered_CIP) {\r\n                    isFiltered_CIP = false;\r\n                    this.classList.toggle(\"active\");\r\n                    requestUpdateTableau();\r\n                } else {\r\n                    isFiltered_CIP = true;\r\n                    this.classList.toggle(\"active\");\r\n                    requestUpdateTableau();\r\n                }\r\n                \r\n            });\r\n\r\n            document.getElementById(\"filtreTableauPourcentage\").addEventListener(\"click\", function() {\r\n                if (filtrePourcentage) {\r\n                    filtrePourcentage = false;\r\n                    this.classList.toggle(\"active\");\r\n                    requestUpdateTableau();\r\n                } else {\r\n                    filtrePourcentage = true;\r\n                    this.classList.toggle(\"active\");\r\n                    requestUpdateTableau();\r\n                }\r\n                \r\n            });\r\n\r\n            \r\n        </script>\r\n        <div id=\"response\"></div>\r\n        \r\n\r\n\r\n        <div id=\"example-table\"></div>\r\n    </main>\r\n\r\n    <div id=\"footerContent\"></div>\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/docker/webserver/singleTask.html b/docker/webserver/singleTask.html
--- a/docker/webserver/singleTask.html	(revision 8adf2dc764d4c83634d9d36e6bea4167d90d1b77)
+++ b/docker/webserver/singleTask.html	(date 1721230796745)
@@ -165,7 +165,8 @@
                 <th>CIP Usager</th>
                 <th>Commencé À</th>
                 <th>Fin À</th>
-                <th>Temps Total</th>
+                <th>Temps Total (h/m/s)</th>
+                <th>Temps Total (%)</th>
               </tr>
             </thead>
             <tbody>
Index: src/main/java/ca/usherbrooke/fgen/api/Tests/UnitTests/Scripts_UnitTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ca.usherbrooke.fgen.api.Tests.UnitTests;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Hashtable;\r\n\r\npublic class Scripts_UnitTests {\r\n\r\n\r\n\r\n    //Dictionnaire Test Session\r\n    List<Hashtable<String, String>> s_verifyDatas = new ArrayList();\r\n\r\n    //Dictionnaire Test Tache\r\n    List<Hashtable<String, String>> t_verifyDatas = new ArrayList();\r\n\r\n    //Dictionnaire Test Projet\r\n    List<Hashtable<String, String>> p_verifyDatas = new ArrayList();\r\n\r\n    //Dictionnaire de base avec l'entièreté des clés\r\n    Hashtable base_verifyDatas = new Hashtable();\r\n\r\n    //@Path(\"addtache/{titre}/{description}/{idProjet}/{cipCreateur}/{idTacheParent}/{cip}\")\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // Constructeur\r\n    public Scripts_UnitTests() {\r\n\r\n        //Dictionnaire de base. il faut qu'il y aille l'entièreté des clés possibles\r\n        base_verifyDatas.put(\"titre_fonction\", \"NONE\");\r\n        base_verifyDatas.put(\"titre\", \"NONE\");\r\n        base_verifyDatas.put(\"description\", \"NONE\");\r\n        base_verifyDatas.put(\"id_projet\", \"NONE\");\r\n        base_verifyDatas.put(\"id_tacheParent\", \"NONE\");\r\n        base_verifyDatas.put(\"id_session\", \"NONE\");\r\n        base_verifyDatas.put(\"id_tache\", \"NONE\");\r\n        base_verifyDatas.put(\"cip_createur\", \"NONE\");\r\n        base_verifyDatas.put(\"cip_proprietaire\", \"NONE\");\r\n        base_verifyDatas.put(\"cip_derniere_modif\", \"NONE\");\r\n        base_verifyDatas.put(\"cip_usager\", \"NONE\");\r\n        base_verifyDatas.put(\"date_debut\", \"NONE\");\r\n        base_verifyDatas.put(\"date_fin\", \"NONE\");\r\n        base_verifyDatas.put(\"date_creation\", \"NONE\");\r\n        base_verifyDatas.put(\"date_modifier\", \"NONE\");\r\n        base_verifyDatas.put(\"commencer_a\", \"NONE\");\r\n        base_verifyDatas.put(\"fini_a\", \"NONE\");\r\n        base_verifyDatas.put(\"response_statusCode\", \"NONE\");\r\n        base_verifyDatas.put(\"SQL_response\", \"NONE\");\r\n        base_verifyDatas.put(\"SQL_request\", \"NONE\");\r\n\r\n\r\n\r\n        //_________________TEST_SESSION_________________\r\n        Hashtable<String, String> s_verifyDatas1 = new Hashtable<>();\r\n        s_verifyDatas1.put(\"titre_fonction\", \"chrono\");\r\n        s_verifyDatas1.put(\"id_session\", \"1\");\r\n        s_verifyDatas1.put(\"commencer_a\", \"date\");\r\n        s_verifyDatas1.put(\"fini_a\", \"null\");\r\n        s_verifyDatas1.put(\"id_tache\", \"1\");\r\n        s_verifyDatas1.put(\"cip_usager\", \"test1234\");\r\n        s_verifyDatas1.put(\"nom_test\", \"CHRONO : Normal_StartChrono\");\r\n        s_verifyDatas1.put(\"response_statusCode\", \"200\");\r\n        s_verifyDatas1.put(\"SQL_response\", \"notnull\");\r\n\r\n        Hashtable<String, String> s_verifyDatas2 = new Hashtable<>();\r\n        s_verifyDatas2.put(\"titre_fonction\", \"chrono\");\r\n        s_verifyDatas2.put(\"id_session\", \"1\");\r\n        s_verifyDatas2.put(\"commencer_a\", \"date\");\r\n        s_verifyDatas2.put(\"fini_a\", \"date\");\r\n        s_verifyDatas2.put(\"id_tache\", \"1\");\r\n        s_verifyDatas2.put(\"cip_usager\", \"test1234\");\r\n        s_verifyDatas2.put(\"nom_test\", \"CHRONO : Normal_StopChrono\");\r\n        s_verifyDatas2.put(\"response_statusCode\", \"200\");\r\n        s_verifyDatas2.put(\"SQL_response\", \"notnull\");\r\n\r\n        Hashtable<String, String> s_verifyDatas3 = new Hashtable<>();\r\n        s_verifyDatas3.put(\"titre_fonction\", \"chrono\");\r\n        s_verifyDatas3.put(\"id_session\", \"2\");\r\n        s_verifyDatas3.put(\"commencer_a\", \"date\");\r\n        s_verifyDatas3.put(\"fini_a\", \"null\");\r\n        s_verifyDatas3.put(\"id_tache\", \"1\");\r\n        s_verifyDatas3.put(\"cip_usager\", \"test1234\");\r\n        s_verifyDatas3.put(\"nom_test\", \"CHRONO : Redemarrer un chronometre arrete\");\r\n        s_verifyDatas3.put(\"response_statusCode\", \"200\");\r\n        s_verifyDatas3.put(\"SQL_response\", \"notnull\");\r\n\r\n        s_verifyDatas.add(s_verifyDatas1);\r\n        s_verifyDatas.add(s_verifyDatas2);\r\n        s_verifyDatas.add(s_verifyDatas3);\r\n\r\n\r\n\r\n        //_________________TEST_TACHE_________________\r\n        Hashtable<String, String> t_verifyDatas1 = new Hashtable<>();\r\n        t_verifyDatas1.put(\"titre_fonction\", \"addtache\");\r\n        t_verifyDatas1.put(\"titre\", \"Test_Tache\");\r\n        t_verifyDatas1.put(\"id_tache\", \"1\"); //ici c'est + 0 du dernier num et non l'id zéro\r\n        t_verifyDatas1.put(\"nom_test\", \"TACHE : Ajout d'une tache dans un projet\");\r\n        t_verifyDatas1.put(\"description\", \"Description_Test1\");\r\n        t_verifyDatas1.put(\"id_projet\", \"1\");\r\n        t_verifyDatas1.put(\"cip_createur\", \"test1234\");\r\n        t_verifyDatas1.put(\"id_tache_parent\", \"null\");\r\n        t_verifyDatas1.put(\"date_creation\", \"date\");\r\n        t_verifyDatas1.put(\"date_modifier\", \"date\");\r\n        t_verifyDatas1.put(\"cip\", \"test1234\");\r\n        t_verifyDatas1.put(\"response_statusCode\", \"200\");\r\n        t_verifyDatas1.put(\"SQL_response\", \"notnull\");\r\n\r\n\r\n        Hashtable<String, String> t_verifyDatas2 = new Hashtable<>();\r\n        t_verifyDatas2.put(\"titre_fonction\", \"addtache\");\r\n        t_verifyDatas2.put(\"titre\", \"Test_Tache\");\r\n        t_verifyDatas2.put(\"id_tache\", \"2\"); //ici c'est + 0 du dernier num et non l'id zéro\r\n        t_verifyDatas2.put(\"nom_test\", \"TACHE : Ajout d'une tache dans un projet avec tache parent\");\r\n        t_verifyDatas2.put(\"description\", \"Sous_Tache_de_Tache_1\");\r\n        t_verifyDatas2.put(\"id_projet\", \"1\");\r\n        t_verifyDatas2.put(\"cip_createur\", \"test1234\");\r\n        t_verifyDatas2.put(\"id_tache_parent\", \"1\");\r\n        t_verifyDatas2.put(\"date_creation\", \"date\");\r\n        t_verifyDatas2.put(\"date_modifier\", \"date\");\r\n        t_verifyDatas2.put(\"cip\", \"test1234\");\r\n        t_verifyDatas2.put(\"response_statusCode\", \"200\");\r\n        t_verifyDatas2.put(\"SQL_response\", \"notnull\");\r\n\r\n\r\n        Hashtable<String, String> t_verifyDatas3 = new Hashtable<>();\r\n        t_verifyDatas3.put(\"titre_fonction\", \"removetache\");\r\n        t_verifyDatas3.put(\"id_tache\", \"2\"); //ici c'est + dernier num et non l'id zéro\r\n        t_verifyDatas3.put(\"nom_test\", \"TACHE : Suppression d'une tache\");\r\n        t_verifyDatas3.put(\"response_statusCode\", \"200\");\r\n        t_verifyDatas3.put(\"SQL_response\", \"null\");\r\n\r\n\r\n\r\n\r\n        //modifytache/{idTache}/{titre}/{description}\r\n        Hashtable<String, String> t_verifyDatas4 = new Hashtable<>();\r\n        t_verifyDatas4.put(\"titre_fonction\", \"modifytache\");\r\n        t_verifyDatas4.put(\"titre\", \"Test_Tache\");\r\n        t_verifyDatas4.put(\"id_tache\", \"1\"); //ici c'est + 0 du dernier num et non l'id zéro\r\n        t_verifyDatas4.put(\"nom_test\", \"TACHE : modification d'une tache existante\");\r\n        t_verifyDatas4.put(\"description\", \"Description_Test1_mofifie\");\r\n        t_verifyDatas4.put(\"id_projet\", \"1\");\r\n        t_verifyDatas4.put(\"cip_createur\", \"test1234\");\r\n        t_verifyDatas4.put(\"id_tache_parent\", \"null\");\r\n        t_verifyDatas4.put(\"date_creation\", \"date\");\r\n        t_verifyDatas4.put(\"date_modifier\", \"date\");\r\n        t_verifyDatas4.put(\"cip\", \"test1234\");\r\n        t_verifyDatas4.put(\"response_statusCode\", \"204\");\r\n        t_verifyDatas4.put(\"SQL_response\", \"notnull\");\r\n\r\n        Hashtable<String, String> t_verifyDatas5 = new Hashtable<>();\r\n        t_verifyDatas5.put(\"titre_fonction\", \"addtache\");\r\n        t_verifyDatas5.put(\"titre\", \"Test_Tache\");\r\n        t_verifyDatas5.put(\"id_tache\", \"3\"); //ici c'est + 0 du dernier num et non l'id zéro\r\n        t_verifyDatas5.put(\"nom_test\", \"TACHE : Ajout d'une deuxième sous-tache\");\r\n        t_verifyDatas5.put(\"description\", \"Sous_Tache_de_Tache_1\");\r\n        t_verifyDatas5.put(\"id_projet\", \"1\");\r\n        t_verifyDatas5.put(\"cip_createur\", \"test1234\");\r\n        t_verifyDatas5.put(\"id_tache_parent\", \"1\");\r\n        t_verifyDatas5.put(\"date_creation\", \"date\");\r\n        t_verifyDatas5.put(\"date_modifier\", \"date\");\r\n        t_verifyDatas5.put(\"cip\", \"test1234\");\r\n        t_verifyDatas5.put(\"response_statusCode\", \"200\");\r\n        t_verifyDatas5.put(\"SQL_response\", \"notnull\");\r\n\r\n\r\n        //A faire plus tard\r\n        /*Hashtable<String, String> t_verifyDatas6 = new Hashtable<>();\r\n        t_verifyDatas6.put(\"titre_fonction\", \"removetache\");\r\n        t_verifyDatas6.put(\"id_tache\", \"2\"); //ici c'est + dernier num et non l'id zéro\r\n        t_verifyDatas6.put(\"nom_test\", \"TACHE : Suppression d'une tache parent\");\r\n        t_verifyDatas6.put(\"response_statusCode\", \"200\");\r\n        t_verifyDatas6.put(\"SQL_response\", \"null\");\r\n        t_verifyDatas6.put(\"SQL_request\", \"null\");*/\r\n\r\n\r\n\r\n\r\n        \r\n        t_verifyDatas.add(t_verifyDatas1);\r\n        t_verifyDatas.add(t_verifyDatas2);\r\n        t_verifyDatas.add(t_verifyDatas3);\r\n        t_verifyDatas.add(t_verifyDatas4);\r\n        t_verifyDatas.add(t_verifyDatas5);\r\n\r\n\r\n\r\n        //_________________TEST_PROJET_________________\r\n        Hashtable<String, String> p_verifyDatas1 = new Hashtable<>();\r\n        p_verifyDatas1.put(\"titre_fonction\", \"newProjet\");\r\n        p_verifyDatas1.put(\"nom_test\", \"PROJET : ajouter un nouveau projet normal\");\r\n        p_verifyDatas1.put(\"id_projet\", \"1\");\r\n        p_verifyDatas1.put(\"titre\", \"Projet_Test\");\r\n        p_verifyDatas1.put(\"description\", \"Description_Projet_Test\");\r\n        p_verifyDatas1.put(\"date_creation\", \"date\");\r\n        p_verifyDatas1.put(\"date_modifier\", \"date\");\r\n        p_verifyDatas1.put(\"cip_createur\", \"test1234\");\r\n        p_verifyDatas1.put(\"cip_proprietaire\", \"test1234\");\r\n        p_verifyDatas1.put(\"cip_derniere_modif\", \"test1234\");\r\n        p_verifyDatas1.put(\"response_statusCode\", \"204\");\r\n        p_verifyDatas1.put(\"SQL_response\", \"notnull\");\r\n\r\n        Hashtable<String, String> p_verifyDatas2 = new Hashtable<>();\r\n        p_verifyDatas2.put(\"titre_fonction\", \"editProjet\");\r\n        p_verifyDatas2.put(\"nom_test\", \"PROJET : modification d'un projet normal\");\r\n        p_verifyDatas2.put(\"id_projet\", \"1\");\r\n        p_verifyDatas2.put(\"titre\", \"Projet_Test\");\r\n        p_verifyDatas2.put(\"description\", \"Description_Projet_Test_modifie\");\r\n        p_verifyDatas2.put(\"date_creation\", \"date\");\r\n        p_verifyDatas2.put(\"date_modifier\", \"date\");\r\n        p_verifyDatas2.put(\"cip_createur\", \"test1234\");\r\n        p_verifyDatas2.put(\"cip_proprietaire\", \"test1234\");\r\n        p_verifyDatas2.put(\"cip_derniere_modif\", \"test1234\");\r\n        p_verifyDatas2.put(\"response_statusCode\", \"204\");\r\n        p_verifyDatas2.put(\"SQL_response\", \"notnull\");\r\n\r\n        Hashtable<String, String> p_verifyDatas3 = new Hashtable<>();\r\n        p_verifyDatas3.put(\"titre_fonction\", \"newProjet\");\r\n        p_verifyDatas3.put(\"nom_test\", \"PROJET : ajouter un deuxieme projet\");\r\n        p_verifyDatas3.put(\"id_projet\", \"2\");\r\n        p_verifyDatas3.put(\"titre\", \"Projet_Test\");\r\n        p_verifyDatas3.put(\"description\", \"Description_Projet_Test2\");\r\n        p_verifyDatas3.put(\"date_creation\", \"date\");\r\n        p_verifyDatas3.put(\"date_modifier\", \"date\");\r\n        p_verifyDatas3.put(\"cip_createur\", \"test1234\");\r\n        p_verifyDatas3.put(\"cip_proprietaire\", \"test1234\");\r\n        p_verifyDatas3.put(\"cip_derniere_modif\", \"test1234\");\r\n        p_verifyDatas3.put(\"response_statusCode\", \"204\");\r\n        p_verifyDatas3.put(\"SQL_response\", \"notnull\");\r\n\r\n        Hashtable<String, String> p_verifyDatas4 = new Hashtable<>();\r\n        p_verifyDatas4.put(\"titre_fonction\", \"deleteProjet\");\r\n        p_verifyDatas4.put(\"nom_test\", \"PROJET : suppression d'un projet\");\r\n        p_verifyDatas4.put(\"id_projet\", \"2\");\r\n        p_verifyDatas4.put(\"response_statusCode\", \"204\");\r\n        p_verifyDatas4.put(\"SQL_response\", \"null\");\r\n\r\n        p_verifyDatas.add(p_verifyDatas1);\r\n        p_verifyDatas.add(p_verifyDatas2);\r\n        p_verifyDatas.add(p_verifyDatas3);\r\n        p_verifyDatas.add(p_verifyDatas4);\r\n\r\n\r\n\r\n        \r\n    }\r\n\r\n    // Autres méthodes de la classe\r\n\r\n    public static void main(String[] args) {\r\n        // Exemple d'utilisation\r\n        Scripts_UnitTests unitTests = new Scripts_UnitTests();\r\n        // Vous pouvez ensuite utiliser unitTests.verifyDatas dans votre programme\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ca/usherbrooke/fgen/api/Tests/UnitTests/Scripts_UnitTests.java b/src/main/java/ca/usherbrooke/fgen/api/Tests/UnitTests/Scripts_UnitTests.java
--- a/src/main/java/ca/usherbrooke/fgen/api/Tests/UnitTests/Scripts_UnitTests.java	(revision 8adf2dc764d4c83634d9d36e6bea4167d90d1b77)
+++ b/src/main/java/ca/usherbrooke/fgen/api/Tests/UnitTests/Scripts_UnitTests.java	(date 1721231340543)
@@ -96,6 +96,8 @@
 
 
         //_________________TEST_TACHE_________________
+
+
         Hashtable<String, String> t_verifyDatas1 = new Hashtable<>();
         t_verifyDatas1.put("titre_fonction", "addtache");
         t_verifyDatas1.put("titre", "Test_Tache");
